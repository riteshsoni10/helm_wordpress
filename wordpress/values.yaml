wordpress:

  ## Bitnami WordPress image
  ## ref: https://hub.docker.com/r/bitnami/wordpress/tags/
  ## @param image.registry [default: REGISTRY_NAME] WordPress image registry
  ## @param image.repository [default: REPOSITORY_NAME/wordpress] WordPress image repository
  ## @skip image.tag WordPress image tag (immutable tags are recommended)
  ## @param image.digest WordPress image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy WordPress image pull policy
  ## @param image.pullSecrets WordPress image pull secrets
  ## @param image.debug Specify if debug values should be set
  ##
  image:
    registry: docker.io
    repository: bitnami/wordpress
    tag: 6.6.2-debian-12-r12
    pullPolicy: IfNotPresent

  ## @param wordpressUsername WordPress username
  ##
  wordpressUsername: admin
  ## @param wordpressPassword WordPress user password
  ## Defaults to a random 10-character alphanumeric string if not set
  ##
  wordpressPassword: ""
  ## @param existingSecret Name of existing secret containing WordPress credentials
  ## NOTE: Must contain key `wordpress-password`
  ## NOTE: When it's set, the `wordpressPassword` parameter is ignored
  ##
  existingSecret: ""
  ## @param wordpressEmail WordPress user email
  ##
  wordpressEmail: admin@example.com
  ## @param wordpressFirstName WordPress user first name
  ##
  wordpressFirstName: Ritesh
  ## @param wordpressLastName WordPress user last name
  ##
  wordpressLastName: Kumar
  ## @param wordpressBlogName Blog name
  ##
  wordpressBlogName: User's Blog!
  ## @param wordpressTablePrefix Prefix to use for WordPress database tables
  ##
  wordpressTablePrefix: wp_
  ## @param wordpressScheme Scheme to use to generate WordPress URLs
  ##
  wordpressScheme: http

  ## @param replicaCount Number of WordPress replicas to deploy
  ## NOTE: ReadWriteMany PVC(s) are required if replicaCount > 1
  ##
  replicaCount: 1

  service:
    ## @param service.type WordPress service type
    ##
    type: NodePort
    ## @param service.ports.http WordPress service HTTP port
    ## @param service.ports.https WordPress service HTTPS port
    ##
    ports:
      http: 80
      https: 443

  ingress:
    ## @param ingress.enabled Enable ingress record generation for WordPress
    ##
    enabled: false


  ## Persistence Parameters
  ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
  ##
  persistence:
    ## @param persistence.enabled Enable persistence using Persistent Volume Claims
    ##
    enabled: true
    ## @param persistence.storageClass Persistent Volume storage class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
    ##
    storageClass: ""
    ## @param persistence.accessModes [array] Persistent Volume access modes
    ##
    accessModes:
      - ReadWriteOnce
    ## @param persistence.accessMode Persistent Volume access mode (DEPRECATED: use `persistence.accessModes` instead)
    ##
    accessMode: ReadWriteOnce
    ## @param persistence.size Persistent Volume size
    ##
    size: 1Gi
    ## @param persistence.dataSource Custom PVC data source
    ##
    dataSource: {}
    ## @param persistence.existingClaim The name of an existing PVC to use for persistence
    ##
    existingClaim: ""
    ## @param persistence.selector Selector to match an existing Persistent Volume for WordPress data PVC
    ## If set, the PVC can't have a PV dynamically provisioned for it
    ## E.g.
    ## selector:
    ##   matchLabels:
    ##     app: my-app
    ##
    selector: {}
    ## @param persistence.annotations Persistent Volume Claim annotations
    ##
    annotations: {}
  ## Init containers parameters:


  ## WordPress Service Account
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    ## @param serviceAccount.create Enable creation of ServiceAccount for WordPress pod
    ##
    create: true

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    targetCPU: 50
    targetMemory: 50
  ## @section Metrics Parameters
  ##


  ## MariaDB chart configuration
  ## ref: https://github.com/bitnami/charts/blob/main/bitnami/mariadb/values.yaml
  ##
  mariadb:
    ## @param mariadb.enabled Deploy a MariaDB server to satisfy the applications database requirements
    ## To use an external database set this to false and configure the `externalDatabase.*` parameters
    ##
    enabled: true
    ## @param mariadb.architecture MariaDB architecture. Allowed values: `standalone` or `replication`
    ##
    architecture: standalone
    ## MariaDB Authentication parameters
    ## @param mariadb.auth.rootPassword MariaDB root password
    ## @param mariadb.auth.database MariaDB custom database
    ## @param mariadb.auth.username MariaDB custom user name
    ## @param mariadb.auth.password MariaDB custom user password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-the-root-password-on-first-run
    ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-on-first-run
    ##      https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
    ##
    auth:
      rootPassword: "root" # This is sample; in reality use secret with secretProvider
      database: bitnami_wordpress
      username: bn_wordpress
      password: "root123"
    ## MariaDB Primary configuration
    ##
    primary:
      ## MariaDB Primary Persistence parameters
      ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
      ## @param mariadb.primary.persistence.enabled Enable persistence on MariaDB using PVC(s)
      ## @param mariadb.primary.persistence.storageClass Persistent Volume storage class
      ## @param mariadb.primary.persistence.accessModes [array] Persistent Volume access modes
      ## @param mariadb.primary.persistence.size Persistent Volume size
      ##
      persistence:
        enabled: true
        storageClass: ""
        accessModes:
          - ReadWriteOnce
        size: 1Gi
      ## MariaDB primary container's resource requests and limits
      ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
      ## We usually recommend not to specify default resources and to leave this as a conscious
      ## choice for the user. This also increases chances charts run on environments with little
      ## resources, such as Minikube. If you do want to specify resources, uncomment the following
      ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
      ## @param mariadb.primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
      ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
      ##
      resourcesPreset: "micro"
      ## @param mariadb.primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
      ## Example:
      ## resources:
      ##   requests:
      ##     cpu: 2
      ##     memory: 512Mi
      ##   limits:
      ##     cpu: 3
      ##     memory: 1024Mi
      ##
      resources: {}
